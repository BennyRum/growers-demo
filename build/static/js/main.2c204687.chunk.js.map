{"version":3,"sources":["components/FileForm.js","components/Results.js","App.js","reportWebVitals.js","index.js"],"names":["FileForm","props","useState","uploadedFile","setUploadedFile","searchInput","setSearchInput","replaceInput","setReplaceInput","onSubmit","event","preventDefault","File","console","log","reader","FileReader","onload","inputText","result","searchRegEx","RegExp","occurances","match","length","outputText","replaceAll","resultHandler","readAsText","alert","className","name","type","accept","onChange","target","files","value","Results","searchVal","replaceVal","countVal","onClick","downloadHandler","App","isSubmitted","setIsSubmitted","search","setSearch","replace","setReplace","count","setCount","processedFile","setProcessedFile","countInput","newFile","Blob","downloadLink","document","createElement","href","URL","createObjectURL","download","click","style","maxWidth","margin","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","getElementById"],"mappings":"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","file":"static/js/main.2c204687.chunk.js","sourcesContent":["import React, { useState } from 'react';\r\n\r\nimport './FileForm.css';\r\n\r\nconst FileForm = (props) => {\r\n    const [uploadedFile, setUploadedFile] = useState({});\r\n    const [searchInput, setSearchInput] = useState('');\r\n    const [replaceInput, setReplaceInput] = useState('');\r\n\r\n    const fileInputHandler = event => {\r\n        setUploadedFile(event.target.files[0]);\r\n    }\r\n\r\n    const searchInputHandler = event => {\r\n        setSearchInput(event.target.value);\r\n    }\r\n\r\n    const replaceInputHandler = event => {\r\n        setReplaceInput(event.target.value);\r\n    }\r\n\r\n    const formSubmitHandler = event => {\r\n        event.preventDefault();\r\n        if (uploadedFile instanceof File) {\r\n            console.log('good');\r\n            const reader = new FileReader();\r\n            reader.onload = () => {\r\n                const inputText = reader.result;\r\n                const searchRegEx = new RegExp(searchInput, \"g\");\r\n                const occurances = (inputText.match(searchRegEx) || []).length;\r\n                const outputText = inputText.replaceAll(searchInput, replaceInput);\r\n                props.resultHandler(searchInput, replaceInput, occurances, outputText);\r\n            }\r\n            reader.readAsText(uploadedFile);\r\n        }\r\n        else{\r\n            alert('Please upload a file');\r\n        }\r\n    }\r\n    return (\r\n        <form onSubmit={formSubmitHandler} className=\"fileForm\">\r\n            <label>\r\n                Upload file\r\n                <input name=\"fileUpload\" type=\"file\" accept=\".txt\" onChange={fileInputHandler} />\r\n            </label>\r\n            <label>\r\n                Search parameter\r\n                <textarea name=\"search\" type=\"text\" onChange={searchInputHandler} value={searchInput}></textarea>\r\n            </label>\r\n            <label>\r\n                Replacement parameter\r\n                <textarea name=\"replace\" type=\"text\" onChange={replaceInputHandler} value={replaceInput}></textarea>\r\n            </label>\r\n            <button type=\"submit\">Find and replace</button>\r\n        </form>\r\n    )\r\n}\r\n\r\nexport default FileForm","import React from 'react';\r\nimport './Results.css';\r\n\r\nconst Results = (props) => {\r\n    return (\r\n        <div className=\"results\">\r\n            <p>Replaced {props.searchVal} with {props.replaceVal} {props.countVal} time{props.countVal > 1 || props.countVal === 0 ? 's' : ''}.</p>\r\n            <button onClick={props.downloadHandler}>Download processed file</button>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Results;","import React, {useState} from 'react';\nimport './App.css';\nimport FileForm from './components/FileForm';\nimport Results from './components/Results';\n\nfunction App() {\n  const [isSubmitted, setIsSubmitted] = useState(false);\n  const [search, setSearch] = useState('');\n  const [replace, setReplace] = useState('');\n  const [count, setCount] = useState(0);\n  const [processedFile, setProcessedFile] = useState({});\n\n  const resultProcessor = (searchInput, replaceInput, countInput, result) => {\n    if (searchInput.length === 0){\n      alert(\"Please enter a search parameter\");\n      return;\n    }\n    setSearch(searchInput);\n    setReplace(replaceInput);\n    setCount(countInput);\n    setIsSubmitted(true);\n    let newFile = new Blob([result], {type: 'text/plain'});\n    setProcessedFile(newFile);\n  }\n\n  const downloadHandler = () => {\n    let downloadLink = document.createElement('a');\n    downloadLink.href = URL.createObjectURL(processedFile);\n    downloadLink.download = 'processedFile';\n    downloadLink.click();\n  }\n\n  return (\n    <div className=\"App\">\n      <header className=\"App-header\">\n        Text File Transformer (for Growers)\n      </header>\n      <FileForm resultHandler={resultProcessor} />\n      {isSubmitted ? <Results searchVal={search} replaceVal={replace} countVal={count} downloadHandler={downloadHandler} /> : <p style={{maxWidth: '500px', margin: '0 auto'}}>Upload your file above, input your search and replace parameters, and click \"Find and replace\"</p>}\n    </div>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}